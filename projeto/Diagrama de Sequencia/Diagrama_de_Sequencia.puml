Diagrama de Sequencia

@startuml
actor Aluno
actor Professor
actor EmpresaParceira

participant Pages
participant Components
participant Controller
participant Service
participant Repository
database PostgreSQL as BD


== Cadastrar Vantagem (pela Empresa) ==
EmpresaParceira -> Pages: (http://localhost:3000/empresa)
Pages -> Components: <CadastroVantagem/>
Components -> Controller: post("/api/vantagem")
Controller -> Service: vantagemService.save(vantagem)
Service -> Repository: vantagemRepository.save(vantagem)
Repository -> BD: save(vantagem)
BD --> Repository: return(vantagem)
Repository --> Service: return(vantagem)
Service --> Controller: return ResponseEntity.ok().build()
Controller --> Components: return ResponseEntity.ok().build()
Components --> Pages: return alert("Vantagem cadastrada com sucesso!")
Pages -> EmpresaParceira: alert("Vantagem cadastrada com sucesso!")

== Listagem de Vantagens (para Aluno) ==
Aluno -> Pages: (http://localhost:3000/aluno) ou (http://localhost:3000/gerenciar-aluno-vantagem
Pages -> Components: <VantagensAluno/>
Components -> Controller: get("/api/vantagem")
Controller -> Service: vantagemService.todasVantagens()
Service -> Repository: vantagemRepository.findAll()
Repository -> BD: findAll()
BD --> Repository: return List<>vantagens
Repository --> Service: return List<>vantagens
Service --> Controller: return List<>vantagens
Controller --> Components: return List<>vantagens
Components --> Pages: return List<>vantagens
Pages -> Aluno: Table com todas as vantagens

== Troca de Moedas por Vantagem (pelo Aluno) ==
Aluno -> Pages: (http://localhost:3000/aluno) ou (http://localhost:3000/gerenciar-aluno-vantagem)
Pages -> Components: <VantagensAluno/>
Components -> Controller: post(`/api/conta-corrente/resgatar-vantagem`)
Controller -> Service: transferenciaService.resgatarVantagem(alunoId, vantagemId)
Service -> Repository: alunoRepository.findById(alunoId)
Repository -> BD: alunoRepository.findById(alunoId)
BD --> Repository: return Aluno
Repository --> Service: return Aluno

Service -> Repository: vantagemRepository.findById(vantagemId)
Repository -> BD: vantagemRepository.findById(vantagemId)
BD --> Repository: return Vantagem
Repository --> Service: return Vantagem

Service -> Repository: contaCorrenteService.debitarValorVantagem(aluno, vantagem.getCustoMoedas())
Service -> Repository: contaCorrenteService.creditarValorVantagem(empresa, vantagem.getCustoMoedas())
Repository -> BD: contaCorrenteService.debitarValorVantagem(aluno, vantagem.getCustoMoedas())
Repository -> BD:  contaCorrenteService.creditarValorVantagem(empresa, vantagem.getCustoMoedas())
BD --> Repository: return ContaAluno
BD --> Repository: return ContaEmpresa
Repository --> Service: return ContaAluno
Repository --> Service: return ContaEmpresa

Service -> Repository: historicoService.gerarHistorico()
Repository -> BD: historicoService.gerarHistorico()

Service -> Repository: contaCorrenteRepository.save(contaAluno)
Service -> Repository: contaCorrenteRepository.save(contaEmpresa)
Repository -> BD: save(contaAluno) 
Repository -> BD: save(contaEmpresa)
BD --> Repository: return vantagemObtida
Repository --> Service: return ResponseEntity.ok().build()
Service --> Controller:  return "Vantagem resgatada com sucesso.";
Controller --> Components: return ResponseEntity.ok(mensagem);
Components --> Pages: return alert("Vantagem resgatada com sucesso.")
Pages -> Aluno: alert("Vantagem resgatada com sucesso.")

@enduml
